// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JwtTokenUsecase is an autogenerated mock type for the JwtTokenUsecase type
type JwtTokenUsecase struct {
	mock.Mock
}

// FindToken provides a mock function with given fields: id, token
func (_m *JwtTokenUsecase) FindToken(id int64, token string) bool {
	ret := _m.Called(id, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: id, role, iin
func (_m *JwtTokenUsecase) GenerateToken(id int64, role string, iin string) (string, error) {
	ret := _m.Called(id, role, iin)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64, string, string) string); ok {
		r0 = rf(id, role, iin)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(id, role, iin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessTTL provides a mock function with given fields:
func (_m *JwtTokenUsecase) GetAccessTTL() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// InsertToken provides a mock function with given fields: id, token
func (_m *JwtTokenUsecase) InsertToken(id int64, token string) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JWTErrorChecker provides a mock function with given fields: err, c
func (_m *JwtTokenUsecase) JWTErrorChecker(err error, c echo.Context) error {
	ret := _m.Called(err, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(error, echo.Context) error); ok {
		r0 = rf(err, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseTokenAndGetID provides a mock function with given fields: token
func (_m *JwtTokenUsecase) ParseTokenAndGetID(token string) (int64, error) {
	ret := _m.Called(token)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenAndGetRole provides a mock function with given fields: token
func (_m *JwtTokenUsecase) ParseTokenAndGetRole(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
